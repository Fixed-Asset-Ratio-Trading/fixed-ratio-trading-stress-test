[33mcommit fe6fd20a8a3f562331e8184d7aaafc61ab2f1a75[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: DJ <davincij@gmail.com>
Date:   Mon Aug 25 16:06:55 2025 +0400

    fix: prevent saving invalid pools when smart contract creation fails
    
    - ÔøΩ Modified: CreateRealPoolAsync throws exception on smart contract failures
    - ‚ùå Removed: Fake signature generation for failed pool creation attempts
    - ÔøΩ Critical: Invalid pools no longer saved to storage when contract rejects them
    - ‚úÖ Enhanced: Proper error propagation to API callers via existing try-catch blocks
    - ÔøΩ Impact: EngineeringRatio and other contract rejections now return error messages
    - ÔøΩ Result: API returns proper JSON-RPC error format instead of false success

[1mdiff --git a/src/FixedRatioStressTest.Infrastructure/Services/SolanaClientService.cs b/src/FixedRatioStressTest.Infrastructure/Services/SolanaClientService.cs[m
[1mindex ca7beb1..17e6d5a 100644[m
[1m--- a/src/FixedRatioStressTest.Infrastructure/Services/SolanaClientService.cs[m
[1m+++ b/src/FixedRatioStressTest.Infrastructure/Services/SolanaClientService.cs[m
[36m@@ -1001,10 +1001,8 @@[m [mpublic async Task CleanupInvalidPoolsAsync()[m
             var ratioWholeNumber = parameters.RatioWholeNumber ?? 1000;[m
             var ratioDirection = parameters.RatioDirection ?? "a_to_b";[m
 [m
[31m-            var (ratioANumerator, ratioBDenominator) = ratioDirection == "a_to_b"[m
[31m-                ? ((ulong)Math.Pow(10, tokenADecimals), ratioWholeNumber * (ulong)Math.Pow(10, tokenBDecimals))[m
[31m-                : (ratioWholeNumber * (ulong)Math.Pow(10, tokenADecimals), (ulong)Math.Pow(10, tokenBDecimals));[m
[31m-            [m
[32m+[m[32m            // FIXED: Use CalculateBasisPoints method that properly handles token ordering normalization[m
[32m+[m[32m            // This ensures ratios are calculated AFTER token reordering, not before[m
             var poolConfig = CreateNormalizedPoolConfig([m
                 tokenAMint.MintAddress, tokenBMint.MintAddress, [m
                 tokenADecimals, tokenBDecimals, [m
[36m@@ -1201,11 +1199,12 @@[m [mpublic async Task CleanupInvalidPoolsAsync()[m
             }[m
             catch (Exception ex)[m
             {[m
[31m-                _logger.LogError(ex, "Smart contract pool creation failed, but tokens are created");[m
[31m-                poolCreationSignature = $"failed_{Guid.NewGuid():N}";[m
[32m+[m[32m                _logger.LogError(ex, "Smart contract pool creation failed");[m
[32m+[m[32m                // Don't save invalid pools - throw the exception to return error to caller[m
[32m+[m[32m                throw new InvalidOperationException($"Pool creation failed on smart contract: {ex.Message}", ex);[m
             }[m
             [m
[31m-            // Step 5: Create real pool data (tokens exist regardless of pool creation success)[m
[32m+[m[32m            // Step 5: Create real pool data (only if smart contract creation succeeded)[m
             // IMPORTANT: Derive pool PDA using the SAME seeds as the transaction builder[m
             // - ordered token mints (lexicographic by raw bytes)[m
             // - basis points derived from ratio and decimals[m
[36m@@ -1234,8 +1233,8 @@[m [mpublic async Task CleanupInvalidPoolsAsync()[m
                 TokenBMint = tokenBMint.MintAddress,[m
                 TokenADecimals = tokenADecimals,[m
                 TokenBDecimals = tokenBDecimals,[m
[31m-                RatioANumerator = ratioANumerator,[m
[31m-                RatioBDenominator = ratioBDenominator,[m
[32m+[m[32m                RatioANumerator = bpRatioA,[m
[32m+[m[32m                RatioBDenominator = bpRatioB,[m
                 CreationSignature = poolCreationSignature,[m
                 CreatedAt = DateTime.UtcNow,[m
                 LastValidated = DateTime.UtcNow,[m
